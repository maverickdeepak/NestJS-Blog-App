var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.083,1,1.858]],["body/controllers/AppController.html",[0,1.804,1,3.095,2,1.485,3,0.537,4,0.463,5,0.463,6,3.383,7,0.653,8,0.039,9,0.985,10,2.649,11,3.383,12,0.537,13,0.027,14,2.262,15,1.821,16,0.032,17,0.032]],["title/modules/AppModule.html",[18,1.083,19,1.858]],["body/modules/AppModule.html",[1,2.846,2,1.457,3,0.386,4,0.332,5,0.332,7,0.697,8,0.039,9,0.708,10,2.627,11,2.429,12,0.386,13,0.019,16,0.026,17,0.026,18,1.659,19,3.596,20,2.035,21,1.308,22,1.624,23,1.624,24,1.308,25,2.527,26,1.624,27,2.429,28,2.429,29,2.429,30,2.627,31,2.935,32,2.363,33,2.219,34,1.624,35,1.624,36,2.95,37,1.18,38,1.457,39,3.318,40,2.499,41,2.95,42,2.95,43,2.95,44,2.95]],["title/injectables/AppService.html",[10,1.477,45,1.083]],["body/injectables/AppService.html",[3,0.517,4,0.445,5,0.445,7,0.517,8,0.039,9,0.949,10,2.403,12,0.517,13,0.026,16,0.032,17,0.032,45,1.763,46,2.177,47,3.256,48,0.851,49,2.403,50,5.52,51,1.168,52,3.955,53,1.949,54,1.763,55,1.949,56,3.955,57,3.955]],["title/controllers/AuthController.html",[0,1.083,58,1.858]],["body/controllers/AuthController.html",[0,1.429,2,1.429,3,0.517,4,0.445,5,0.445,7,0.638,8,0.039,9,0.949,12,0.517,13,0.026,14,2.177,15,1.753,16,0.032,17,0.032,58,3.023,59,3.256,60,2.796,61,4.015,62,2.343,63,3.256,64,3.955,65,2.452,66,1.949]],["title/modules/AuthModule.html",[18,1.083,30,1.477]],["body/modules/AuthModule.html",[2,1.573,3,0.433,4,0.372,5,0.372,7,0.676,8,0.039,9,0.793,12,0.433,13,0.021,16,0.028,17,0.028,18,1.757,20,1.466,21,1.466,22,1.821,23,1.821,24,1.466,25,2.677,26,2.677,30,2.768,32,1.928,33,2.395,34,1.821,35,1.821,40,2.05,58,3.015,62,2.617,63,2.723,67,2.723,68,2.723,69,2.723,70,3.307,71,2.697,72,3.307,73,2.723]],["title/injectables/AuthService.html",[45,1.083,62,1.329]],["body/injectables/AuthService.html",[3,0.345,4,0.297,5,0.297,7,0.488,8,0.04,9,0.633,12,0.345,13,0.017,15,1.169,16,0.024,17,0.024,38,1.699,45,1.348,46,1.452,48,0.567,49,1.837,51,1.277,53,2.316,54,1.861,55,1.837,62,1.653,65,1.635,66,1.837,71,1.635,74,2.172,75,2.834,76,5.149,77,4.701,78,2.053,79,2.172,80,2.116,81,2.638,82,2.053,83,2.053,84,1.101,85,1.491,86,2.638,87,4.701,88,3.87,89,3.729,90,3.87,91,2.638,92,2.636,93,2.636,94,2.172,95,2.638,96,1.865,97,2.172,98,2.172,99,2.681,100,1.865,101,2.638,102,2.638,103,2.638,104,1.865]],["title/classes/CreatePostDTO.html",[13,0.019,105,1.65]],["body/classes/CreatePostDTO.html",[3,0.166,4,0.143,5,0.143,7,0.499,8,0.039,12,0.166,13,0.018,16,0.014,17,0.014,37,2.119,48,0.274,51,1.341,54,1.787,84,1.565,85,1.816,93,0.899,104,2.248,105,1.167,106,0.564,107,3.296,108,2.317,109,0.627,110,1.208,111,2.909,112,2.726,113,2.726,114,3.332,115,2.726,116,3.533,117,4.403,118,2.497,119,3.533,120,3.839,121,2.013,122,3.625,123,3.816,124,3.927,125,1.272,126,1.272,127,2.12,128,2.12,129,2.12,130,2.12,131,2.12,132,1.272,133,1.272,134,1.971,135,1.272,136,1.745,137,1.927,138,2.12,139,3.332,140,2.12,141,1.272,142,1.272,143,1.272,144,1.745,145,3.18,146,1.272,147,1.272,148,3.816,149,2.12,150,2.12,151,2.12,152,2.12,153,1.272,154,1.272,155,1.272,156,1.272,157,1.272,158,3.18,159,3.18,160,1.745,161,2.12,162,2.12,163,2.12,164,1.272,165,2.618,166,1.745,167,1.272,168,1.272,169,1.272,170,1.272,171,1.272,172,3.18,173,1.272,174,1.272,175,1.272,176,2.726,177,1.272,178,2.12,179,2.12,180,1.971,181,2.861,182,2.497,183,2.12,184,1.047,185,1.047,186,2.12,187,0.627,188,0.899,189,1.272,190,1.272,191,0.789,192,1.272,193,3.839,194,0.627,195,2.424,196,1.272,197,1.272,198,2.726,199,2.12,200,2.12,201,0.899,202,1.272,203,1.272,204,1.272,205,1.272,206,1.272,207,1.272,208,1.272,209,1.047,210,1.047,211,1.499,212,1.272]],["title/classes/CreatePostMetaOptionsDTO.html",[13,0.019,134,1.858]],["body/classes/CreatePostMetaOptionsDTO.html",[3,0.473,4,0.407,5,0.407,7,0.473,8,0.038,12,0.473,13,0.03,16,0.03,17,0.03,48,0.778,51,1.362,54,1.667,84,1.362,106,1.603,107,3.588,108,2.03,110,2.044,121,2.044,134,2.859,137,3.588,180,3.314,182,3.26,187,1.782,210,4.179,211,3.588,213,2.978,214,3.618,215,3.618,216,3.618]],["title/classes/CreateUserDTO.html",[13,0.019,217,1.65]],["body/classes/CreateUserDTO.html",[3,0.348,4,0.3,5,0.3,7,0.348,8,0.038,12,0.348,13,0.024,16,0.024,17,0.024,38,1.799,48,0.573,51,1.394,54,1.958,84,1.394,85,1.501,90,4.098,92,3.073,106,1.18,109,1.312,110,1.664,121,2.092,160,3.09,180,2.926,181,2.653,182,3.518,184,2.192,185,2.192,187,1.312,209,3.09,217,2.066,218,4.098,219,3.579,220,4.348,221,2.663,222,2.663,223,2.663,224,2.663,225,2.663,226,2.663,227,2.663,228,3.754,229,3.754,230,3.754,231,3.754,232,3.754,233,3.754,234,3.754,235,3.754,236,5.164,237,3.754,238,4.721,239,3.754,240,1.849,241,2.663,242,3.754,243,2.663,244,3.754,245,2.663,246,2.663]],["title/classes/GetUserParamDTO.html",[13,0.019,247,1.65]],["body/classes/GetUserParamDTO.html",[3,0.445,4,0.383,5,0.383,7,0.645,8,0.039,12,0.445,13,0.032,16,0.029,17,0.029,37,1.36,38,1.887,48,0.731,51,1.004,84,1.599,85,1.772,106,1.507,109,1.675,110,1.964,121,1.507,181,3.132,187,1.675,188,2.403,194,1.675,195,2.439,240,2.573,247,2.439,248,3.648,249,2.982,250,3.4,251,4.431,252,3.4,253,3.4,254,3.648,255,4.431]],["title/classes/PatchPostDTO.html",[13,0.019,256,1.858]],["body/classes/PatchPostDTO.html",[3,0.447,4,0.384,5,0.384,7,0.646,8,0.039,12,0.447,13,0.029,16,0.029,17,0.029,37,1.776,48,0.734,51,1.008,84,1.008,105,1.879,106,1.513,108,2.169,109,1.682,110,1.969,121,1.513,122,2.81,180,2.754,187,1.682,191,2.116,193,3.657,194,1.682,195,1.879,240,2.189,249,2.985,254,3.657,256,2.754,257,3.657,258,3.657,259,4.443,260,2.754,261,3.414,262,3.414,263,2.81,264,1.879,265,2.81]],["title/classes/PatchUserDTO.html",[13,0.019,266,1.858]],["body/classes/PatchUserDTO.html",[3,0.532,4,0.458,5,0.458,7,0.649,8,0.038,12,0.532,13,0.026,16,0.032,17,0.032,38,1.794,106,1.803,109,2.005,201,2.876,217,2.24,258,4.086,263,3.35,264,2.24,266,3.076,267,3.35,268,4.963,269,3.35,270,2.876]],["title/controllers/PostController.html",[0,1.083,271,1.858]],["body/controllers/PostController.html",[0,0.651,2,0.651,3,0.236,4,0.203,5,0.203,7,0.552,8,0.039,9,0.432,12,0.236,13,0.012,14,0.992,15,0.799,16,0.018,17,0.018,37,1.932,39,2.312,48,0.388,49,1.384,51,1.247,53,2.081,54,1.617,55,2.081,60,1.274,65,1.117,66,0.888,75,3.023,78,0.992,82,2.145,83,2.145,84,1.151,85,1.558,88,1.484,99,1.741,104,1.274,105,2.572,108,2.244,118,1.985,121,1.872,191,2.415,194,0.888,249,0.992,256,2.896,264,1.546,265,2.841,270,1.274,271,1.741,272,1.484,273,2.841,274,2.312,275,3.208,276,2.312,277,2.809,278,2.809,279,1.802,280,1.802,281,3.208,282,3.896,283,2.809,284,1.741,285,2.809,286,2.809,287,3.896,288,1.802,289,1.802,290,1.484,291,2.809,292,1.802,293,2.841,294,1.802,295,2.809,296,1.802,297,2.312,298,1.802,299,1.802,300,2.809,301,2.312,302,1.802,303,1.802,304,1.484,305,2.841,306,2.081,307,1.484,308,2.841,309,2.841,310,1.484,311,1.802,312,1.802,313,1.802,314,1.484,315,1.802,316,1.802,317,1.802,318,1.802,319,2.312,320,1.802,321,1.802,322,1.802,323,1.802,324,1.802,325,1.802,326,1.802,327,1.802,328,1.802]],["title/injectables/PostService.html",[45,1.083,306,1.477]],["body/injectables/PostService.html",[3,0.241,4,0.207,5,0.207,7,0.374,8,0.04,9,0.442,12,0.241,13,0.012,14,1.014,15,0.816,16,0.018,17,0.018,38,1.759,45,1.032,46,1.014,48,0.396,49,1.407,51,1.26,53,2.398,54,1.806,55,2.102,66,1.724,75,2.906,78,1.014,79,1.516,80,1.805,82,2.17,83,2.17,84,1.164,85,1.576,93,2.473,94,1.516,96,2.019,99,1.77,100,1.302,108,2.277,111,4.28,120,3.716,136,1.516,191,1.77,240,1.407,249,1.572,260,2.798,273,4.204,274,2.351,275,3.245,276,2.351,284,1.77,290,2.351,293,4.204,297,2.351,306,1.407,329,1.516,330,2.856,331,1.841,332,2.856,333,1.841,334,1.841,335,1.841,336,2.856,337,1.841,338,2.856,339,3.716,340,1.841,341,1.516,342,1.841,343,1.302,344,1.841,345,1.841]],["title/modules/PostsModule.html",[18,1.083,31,1.65]],["body/modules/PostsModule.html",[2,1.593,3,0.441,4,0.38,5,0.38,7,0.681,8,0.039,9,0.809,12,0.441,13,0.022,16,0.029,17,0.029,18,1.774,20,1.495,21,1.495,22,1.857,23,1.857,24,1.495,25,2.703,26,1.857,31,3.152,32,2.456,33,2.426,34,1.857,35,1.857,40,2.732,73,2.777,271,3.044,306,2.73,307,2.777,346,2.777,347,2.777,348,3.373,349,3.373,350,3.373]],["title/injectables/UserService.html",[45,1.083,80,1.199]],["body/injectables/UserService.html",[3,0.299,4,0.258,5,0.258,7,0.522,8,0.04,9,0.549,12,0.299,13,0.015,15,1.014,16,0.022,17,0.022,38,1.591,45,1.217,46,1.26,48,0.492,49,1.658,51,1.179,53,1.967,54,1.773,55,1.658,61,2.771,62,2.247,65,2.087,66,2.169,71,1.419,75,2.7,78,1.853,80,1.346,82,2.198,83,2.198,84,1.179,85,1.597,92,3.316,97,1.884,98,1.884,100,1.618,219,3.862,240,2.417,247,2.7,249,2.923,260,1.419,264,1.26,339,1.884,341,2.771,343,2.379,351,1.884,352,3.993,353,3.366,354,2.289,355,2.289,356,2.289,357,3.287,358,2.822,359,2.289,360,3.366,361,2.289,362,1.884,363,2.289,364,3.366,365,2.289,366,2.289,367,3.366,368,2.289,369,2.289,370,2.289,371,2.289,372,2.289,373,2.289,374,2.289]],["title/controllers/UsersController.html",[0,1.083,375,1.858]],["body/controllers/UsersController.html",[0,0.571,2,0.571,3,0.207,4,0.178,5,0.178,7,0.553,8,0.039,9,0.379,12,0.207,13,0.01,14,0.87,15,0.7,16,0.016,17,0.016,37,1.845,38,1.528,48,0.34,49,1.247,51,1.17,53,2.083,54,1.145,55,2.188,60,1.117,66,0.779,75,2.913,78,0.87,80,1.585,82,1.743,83,2.181,84,1.311,85,1.266,96,1.117,99,2.621,108,1.448,118,1.117,121,1.756,124,2.981,139,2.981,194,0.779,195,1.994,217,2.445,240,2.576,247,2.445,260,1.569,264,1.743,266,2.861,270,1.117,281,2.607,284,0.98,301,2.084,304,1.301,305,2.981,308,2.084,309,2.084,310,1.301,314,2.607,319,1.301,343,3.526,357,3.656,358,3.365,362,1.301,375,1.569,376,1.301,377,2.532,378,3.622,379,3.167,380,3.622,381,2.532,382,1.58,383,1.58,384,3.622,385,1.58,386,1.58,387,1.58,388,2.532,389,3.622,390,2.532,391,1.58,392,1.58,393,2.532,394,2.532,395,2.532,396,3.167,397,1.58,398,2.532,399,2.532,400,1.58,401,3.622,402,1.58,403,1.58,404,1.58,405,3.167,406,1.58,407,1.301,408,3.167,409,1.58,410,1.58,411,1.58,412,1.58,413,1.58,414,1.58,415,1.58,416,1.58,417,1.58,418,1.58,419,1.58,420,3.167,421,3.167,422,1.58]],["title/modules/UsersModule.html",[18,1.083,32,1.329]],["body/modules/UsersModule.html",[2,1.573,3,0.433,4,0.372,5,0.372,7,0.676,8,0.039,9,0.793,12,0.433,13,0.021,16,0.028,17,0.028,18,1.757,20,1.466,21,1.466,22,1.821,23,1.821,24,1.466,25,2.677,26,2.677,30,2.144,32,2.49,33,2.395,34,1.821,35,1.821,40,2.05,71,2.697,80,2.361,375,3.015,407,2.723,423,2.723,424,2.723,425,2.723,426,3.307,427,3.307,428,3.307]],["title/coverage.html",[429,2.88]],["body/coverage.html",[0,1.773,1,1.804,5,0.328,6,2.396,8,0.038,10,1.434,13,0.034,16,0.026,17,0.026,24,1.29,38,1.647,45,1.773,47,2.396,58,1.804,59,2.396,62,1.29,74,2.396,80,1.164,84,0.859,105,1.602,107,2.822,108,1.823,109,2.533,134,1.804,137,2.057,213,2.396,217,1.602,218,2.396,247,1.602,248,2.396,256,1.804,257,2.396,266,1.804,267,2.396,271,1.804,272,2.396,284,1.804,306,1.434,329,2.396,351,2.396,375,1.804,376,2.396,429,2.057,430,2.91,431,2.91,432,2.91,433,5.787,434,4.905,435,4.558,436,3.993,437,3.993,438,2.396,439,2.91,440,2.91,441,2.91,442,3.993,443,2.91,444,2.91,445,2.91,446,2.91,447,2.91]],["title/dependencies.html",[21,1.596,448,2.068]],["body/dependencies.html",[8,0.039,9,0.944,13,0.031,16,0.031,17,0.031,21,1.745,187,1.94,188,2.783,194,1.94,201,2.783,269,3.241,449,3.937,450,3.937,451,5.277,452,3.937,453,3.937,454,3.937,455,3.937,456,3.937,457,3.937,458,3.937,459,3.937,460,3.937,461,3.937,462,3.937,463,3.937]],["title/miscellaneous/enumerations.html",[464,1.557,465,2.965]],["body/miscellaneous/enumerations.html",[8,0.039,16,0.03,17,0.03,48,0.806,108,1.885,114,3.881,144,3.881,165,3.881,166,3.881,211,4.171,358,3.332,464,2.322,465,3.084,466,3.746,467,3.746,468,3.746,469,4.714,470,4.714,471,4.714,472,3.746,473,4.714,474,4.714]],["title/miscellaneous/functions.html",[464,1.557,475,2.965]],["body/miscellaneous/functions.html",[8,0.034,16,0.034,17,0.034,24,2.483,48,0.973,438,3.726,464,2.806,475,3.726,476,4.526]],["title/index.html",[48,0.54,477,2.512,478,2.512]],["body/index.html",[4,0.348,8,0.038,16,0.027,17,0.027,37,1.236,195,2.588,429,2.184,479,3.09,480,3.09,481,4.159,482,3.09,483,3.09,484,3.09,485,3.09,486,3.09,487,3.09,488,4.701,489,3.09,490,3.09,491,3.09,492,3.09,493,5.524,494,3.09,495,3.09,496,3.09,497,5.406,498,3.09,499,3.09,500,4.159,501,3.09,502,3.09,503,3.09,504,3.09,505,4.159,506,4.159,507,3.09,508,3.09,509,3.09,510,4.159,511,4.159,512,3.09,513,3.09,514,3.09,515,3.09,516,3.09,517,2.544,518,3.09,519,3.09,520,3.09,521,3.09,522,3.09,523,3.09,524,3.09,525,3.09,526,3.09,527,3.09,528,2.544,529,3.09,530,3.09,531,3.09,532,3.09,533,3.09,534,3.09,535,2.544]],["title/modules.html",[20,1.806]],["body/modules.html",[8,0.033,16,0.033,17,0.033,19,2.623,20,1.875,30,2.085,31,2.33,32,1.875,517,4.651,536,5.649,537,5.649,538,5.649]],["title/overview.html",[539,3.355]],["body/overview.html",[2,1.133,8,0.038,10,2.333,16,0.027,17,0.027,18,1.133,19,3.575,20,1.39,21,1.39,22,1.726,23,1.726,24,1.39,25,1.726,26,1.726,27,2.582,28,2.582,29,2.582,30,2.675,31,3.052,32,2.457,33,2.312,34,1.726,35,1.726,46,1.726,62,2.457,67,2.582,68,2.582,69,2.582,80,2.217,106,1.39,306,2.333,346,2.582,347,2.582,423,2.582,424,2.582,425,2.582,539,2.582,540,4.736,541,3.136]],["title/properties.html",[110,1.596,448,2.068]],["body/properties.html",[8,0.038,16,0.034,17,0.034,37,1.781,110,1.974,528,3.667,535,3.667,542,4.454,543,4.454,544,4.454]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"modules/PostsModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":433,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":543,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":458,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":461,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":457,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":434,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":440,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":435,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":441,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":445,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":442,"title":{},"body":{"coverage.html":{}}}],["01t10:00:00z",{"_index":151,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["05",{"_index":150,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["1",{"_index":260,"title":{},"body":{"classes/PatchPostDTO.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["1.1.25",{"_index":450,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":413,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":451,"title":{},"body":{"dependencies.html":{}}}],["10})@apiquery({name",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":251,"title":{},"body":{"classes/GetUserParamDTO.html":{}}}],["2",{"_index":339,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["2.0.5",{"_index":453,"title":{},"body":{"dependencies.html":{}}}],["2/4",{"_index":437,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":301,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":286,"title":{},"body":{"controllers/PostController.html":{}}}],["2023",{"_index":149,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["3",{"_index":371,"title":{},"body":{"injectables/UserService.html":{}}}],["4",{"_index":540,"title":{},"body":{"overview.html":{}}}],["5/6",{"_index":444,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":436,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":541,"title":{},"body":{"overview.html":{}}}],["7.4.0",{"_index":456,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":463,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":232,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["83",{"_index":443,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":159,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["adjust",{"_index":198,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["amazing",{"_index":518,"title":{},"body":{"index.html":{}}}],["api",{"_index":314,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":308,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":299,"title":{},"body":{"controllers/PostController.html":{}}}],["apiproperty",{"_index":193,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/PatchPostDTO.html":{}}}],["apiproperty({example",{"_index":122,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/PatchPostDTO.html":{}}}],["apiproperty({type",{"_index":135,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["apipropertyoptional",{"_index":255,"title":{},"body":{"classes/GetUserParamDTO.html":{}}}],["apipropertyoptional({description",{"_index":250,"title":{},"body":{"classes/GetUserParamDTO.html":{}}}],["apiquery",{"_index":408,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":309,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":310,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":313,"title":{},"body":{"controllers/PostController.html":{}}}],["apitags('users",{"_index":410,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":495,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":412,"title":{},"body":{"controllers/UsersController.html":{}}}],["application.'})@apiresponse({status",{"_index":391,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":487,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archived",{"_index":470,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["array",{"_index":136,"title":{},"body":{"classes/CreatePostDTO.html":{},"injectables/PostService.html":{}}}],["auth",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["auth.controller",{"_index":72,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":58,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":528,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":62,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["backers",{"_index":519,"title":{},"body":{"index.html":{}}}],["body",{"_index":304,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostController.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":538,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":536,"title":{},"body":{"modules.html":{}}}],["building",{"_index":482,"title":{},"body":{"index.html":{}}}],["characters",{"_index":233,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"modules/PostsModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":106,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":67,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":69,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":346,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":348,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":347,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":423,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":424,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":425,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["compodoc/compodoc",{"_index":449,"title":{},"body":{"dependencies.html":{}}}],["console.log('createpostdto",{"_index":321,"title":{},"body":{"controllers/PostController.html":{}}}],["console.log('isauth",{"_index":366,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log('patchpostdto",{"_index":325,"title":{},"body":{"controllers/PostController.html":{}}}],["console.log('postid",{"_index":317,"title":{},"body":{"controllers/PostController.html":{}}}],["console.log(typeof",{"_index":419,"title":{},"body":{"controllers/UsersController.html":{}}}],["const",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":78,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["constructor(authservice",{"_index":354,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UsersController.html":{}}}],["constructor(userservice",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{}}}],["contain",{"_index":235,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["content",{"_index":111,"title":{},"body":{"classes/CreatePostDTO.html":{},"injectables/PostService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":312,"title":{},"body":{"controllers/PostController.html":{}}}],["controller('users",{"_index":409,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":429,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":191,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/PatchPostDTO.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["created",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostController.html":{}}}],["createpost",{"_index":274,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["createpost(@body",{"_index":320,"title":{},"body":{"controllers/PostController.html":{}}}],["createpost(createpostdto",{"_index":279,"title":{},"body":{"controllers/PostController.html":{}}}],["createpost(post",{"_index":332,"title":{},"body":{"injectables/PostService.html":{}}}],["createpostdto",{"_index":105,"title":{"classes/CreatePostDTO.html":{}},"body":{"classes/CreatePostDTO.html":{},"classes/PatchPostDTO.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":134,"title":{"classes/CreatePostMetaOptionsDTO.html":{}},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"coverage.html":{}}}],["createuser",{"_index":377,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(@body",{"_index":418,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":382,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":217,"title":{"classes/CreateUserDTO.html":{}},"body":{"classes/CreateUserDTO.html":{},"classes/PatchUserDTO.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["creating",{"_index":283,"title":{},"body":{"controllers/PostController.html":{}}}],["date",{"_index":148,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":121,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["deepak",{"_index":367,"title":{},"body":{"injectables/UserService.html":{}}}],["deepak@gmail.com",{"_index":368,"title":{},"body":{"injectables/UserService.html":{}}}],["defaultvaluepipe",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":415,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":51,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["delete",{"_index":384,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser",{"_index":378,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":496,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":430,"title":{},"body":{"coverage.html":{}}}],["draft",{"_index":144,"title":{},"body":{"classes/CreatePostDTO.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":264,"title":{},"body":{"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"controllers/PostController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dto.ts",{"_index":109,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"coverage.html":{}}}],["dto.ts:103",{"_index":173,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["dto.ts:12",{"_index":262,"title":{},"body":{"classes/PatchPostDTO.html":{}}}],["dto.ts:121",{"_index":143,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["dto.ts:14",{"_index":253,"title":{},"body":{"classes/GetUserParamDTO.html":{}}}],["dto.ts:16",{"_index":224,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["dto.ts:22",{"_index":226,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["dto.ts:27",{"_index":222,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["dto.ts:28",{"_index":175,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["dto.ts:36",{"_index":241,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["dto.ts:37",{"_index":147,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["dto.ts:48",{"_index":164,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["dto.ts:56",{"_index":168,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["dto.ts:65",{"_index":126,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["dto.ts:74",{"_index":156,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["dto.ts:83",{"_index":133,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["dto.ts:92",{"_index":154,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["dtos/create",{"_index":270,"title":{},"body":{"classes/PatchUserDTO.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":362,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/patch",{"_index":311,"title":{},"body":{"controllers/PostController.html":{}}}],["e.g",{"_index":163,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["e2e",{"_index":507,"title":{},"body":{"index.html":{}}}],["each",{"_index":172,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["efficient",{"_index":483,"title":{},"body":{"index.html":{}}}],["email",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"injectables/UserService.html":{}}}],["endpoint",{"_index":281,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["enteries",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":145,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["enum/poststatus.enum",{"_index":190,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["enum/posttype.enum",{"_index":189,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["enumerations",{"_index":465,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["example",{"_index":195,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exists",{"_index":344,"title":{},"body":{"injectables/PostService.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"modules/PostsModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":455,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":258,"title":{},"body":{"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{}}}],["false",{"_index":139,"title":{},"body":{"classes/CreatePostDTO.html":{},"controllers/UsersController.html":{}}}],["false})@isiso8601()@isoptional",{"_index":153,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["false})@isoptional()@isarray()@isstring({each",{"_index":170,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["false})@isoptional()@isjson",{"_index":155,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["false})@isoptional()@isstring",{"_index":125,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["false})@isoptional()@isurl",{"_index":132,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["featured",{"_index":129,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["featuredimageurl",{"_index":112,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["fetches",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{}}}],["fields",{"_index":206,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"modules/PostsModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["find",{"_index":341,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["findall",{"_index":352,"title":{},"body":{"injectables/UserService.html":{}}}],["findall(getuserparamdto",{"_index":356,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid",{"_index":353,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":360,"title":{},"body":{"injectables/UserService.html":{}}}],["first",{"_index":123,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["firstname",{"_index":219,"title":{},"body":{"classes/CreateUserDTO.html":{},"injectables/UserService.html":{}}}],["fit",{"_index":200,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["format",{"_index":162,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["forwardref",{"_index":71,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["framework",{"_index":481,"title":{},"body":{"index.html":{}}}],["function",{"_index":439,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":475,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":411,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":387,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:postid",{"_index":291,"title":{},"body":{"controllers/PostController.html":{}}}],["get('/users/:userid",{"_index":295,"title":{},"body":{"controllers/PostController.html":{}}}],["getallposts",{"_index":275,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["gethello",{"_index":50,"title":{},"body":{"injectables/AppService.html":{}}}],["getpostbyid",{"_index":276,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["getpostbyid(@param('postid",{"_index":316,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostbyid(postid",{"_index":290,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["getting",{"_index":477,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":247,"title":{"classes/GetUserParamDTO.html":{}},"body":{"classes/GetUserParamDTO.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["getuserposts",{"_index":277,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserposts(@param('userid",{"_index":327,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserposts(userid",{"_index":294,"title":{},"body":{"controllers/PostController.html":{}}}],["getusers",{"_index":379,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":386,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersposts",{"_index":330,"title":{},"body":{"injectables/PostService.html":{}}}],["getusersposts(userid",{"_index":336,"title":{},"body":{"injectables/PostService.html":{}}}],["grow",{"_index":514,"title":{},"body":{"index.html":{}}}],["hello",{"_index":56,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":525,"title":{},"body":{"index.html":{}}}],["his/her",{"_index":345,"title":{},"body":{"injectables/PostService.html":{}}}],["https://example.com/featured",{"_index":127,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["https://nestjs.com",{"_index":532,"title":{},"body":{"index.html":{}}}],["id",{"_index":249,"title":{},"body":{"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":431,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":130,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["image.jpg",{"_index":128,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"modules/PostsModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":48,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"modules/PostsModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["inject",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":45,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":46,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"controllers/UsersController.html":{}}}],["installation",{"_index":492,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":494,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":176,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["isauth",{"_index":364,"title":{},"body":{"injectables/UserService.html":{}}}],["isauthenticated",{"_index":76,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":242,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isenum",{"_index":177,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["isenum(poststatus",{"_index":203,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["isenum(posttype",{"_index":197,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["isint",{"_index":254,"title":{},"body":{"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{}}}],["isiso8601",{"_index":178,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["isjson",{"_index":179,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["isnotempty",{"_index":180,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/PatchPostDTO.html":{}}}],["isoptional",{"_index":181,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUserParamDTO.html":{}}}],["isstring",{"_index":182,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{}}}],["isstring()@isnotempty",{"_index":214,"title":{},"body":{"classes/CreatePostMetaOptionsDTO.html":{}}}],["isstring()@isnotempty()@isemail",{"_index":221,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":223,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":227,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":225,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isurl",{"_index":183,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["items",{"_index":140,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["join",{"_index":521,"title":{},"body":{"index.html":{}}}],["kamil",{"_index":529,"title":{},"body":{"index.html":{}}}],["key",{"_index":210,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{}}}],["lastname",{"_index":220,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":238,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["license",{"_index":535,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":511,"title":{},"body":{"index.html":{}}}],["limit",{"_index":357,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["list",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{}}}],["login",{"_index":77,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{}}}],["long",{"_index":234,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["lowercase",{"_index":239,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["matches",{"_index":184,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{}}}],["matches(/^(?=.*[a",{"_index":246,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["matches(/^[a",{"_index":202,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"modules/PostsModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["maxlength",{"_index":243,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["maxlength(96",{"_index":244,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["message",{"_index":160,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{}}}],["meta",{"_index":137,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"coverage.html":{}}}],["metadata",{"_index":460,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":113,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["method",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{}}}],["methods",{"_index":49,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["minlength",{"_index":185,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{}}}],["minlength(3",{"_index":209,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{}}}],["minlength(5",{"_index":196,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["minlength(8",{"_index":245,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["miscellaneous",{"_index":464,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":510,"title":{},"body":{"index.html":{}}}],["mode",{"_index":500,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":524,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":530,"title":{},"body":{"index.html":{}}}],["name",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["needed",{"_index":212,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["nest",{"_index":488,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":534,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"modules/PostsModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":452,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":269,"title":{},"body":{"classes/PatchUserDTO.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":454,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":194,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":284,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["node.js",{"_index":480,"title":{},"body":{"index.html":{}}}],["npm",{"_index":493,"title":{},"body":{"index.html":{}}}],["number",{"_index":240,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["number})@isoptional()@isint()@type(undefined",{"_index":252,"title":{},"body":{"classes/GetUserParamDTO.html":{}}}],["object",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"injectables/PostService.html":{}}}],["one",{"_index":236,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["open",{"_index":512,"title":{},"body":{"index.html":{}}}],["optional",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUserParamDTO.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["options",{"_index":138,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["options.dto",{"_index":192,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["options.dto.ts",{"_index":213,"title":{},"body":{"classes/CreatePostMetaOptionsDTO.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":215,"title":{},"body":{"classes/CreatePostMetaOptionsDTO.html":{}}}],["options.dto.ts:9",{"_index":216,"title":{},"body":{"classes/CreatePostMetaOptionsDTO.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":539,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":448,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":358,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["params",{"_index":340,"title":{},"body":{"injectables/PostService.html":{}}}],["parseintpipe",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{}}}],["partialtype",{"_index":263,"title":{},"body":{"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{}}}],["partialtype(createpostdto",{"_index":259,"title":{},"body":{"classes/PatchPostDTO.html":{}}}],["partialtype(createuserdto",{"_index":268,"title":{},"body":{"classes/PatchUserDTO.html":{}}}],["particular",{"_index":338,"title":{},"body":{"injectables/PostService.html":{}}}],["password",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{}}}],["patch",{"_index":305,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":256,"title":{"classes/PatchPostDTO.html":{}},"body":{"classes/PatchPostDTO.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["patchuserdto",{"_index":266,"title":{"classes/PatchUserDTO.html":{}},"body":{"classes/PatchUserDTO.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{}}}],["please",{"_index":522,"title":{},"body":{"index.html":{}}}],["position",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{}}}],["post",{"_index":108,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/PatchPostDTO.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@isnotempty()@isstring()@minlength(5",{"_index":174,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["post'})@isstring()@isnotempty()@matches(/^[a",{"_index":157,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["post()@apioperation({summary",{"_index":280,"title":{},"body":{"controllers/PostController.html":{}}}],["post.'})@apiresponse({status",{"_index":285,"title":{},"body":{"controllers/PostController.html":{}}}],["post.controller",{"_index":350,"title":{},"body":{"modules/PostsModule.html":{}}}],["postcontroller",{"_index":271,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postid",{"_index":293,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["posts",{"_index":273,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["posts/posts.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["postservice",{"_index":306,"title":{"injectables/PostService.html":{}},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"modules/PostsModule.html":{},"coverage.html":{},"overview.html":{}}}],["postsmodule",{"_index":31,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["poststatus",{"_index":165,"title":{},"body":{"classes/CreatePostDTO.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus})@isenum(poststatus",{"_index":167,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["posttype",{"_index":114,"title":{},"body":{"classes/CreatePostDTO.html":{},"miscellaneous/enumerations.html":{}}}],["posttype})@isenum(posttype)@isnotempty",{"_index":146,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["prefix",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["production",{"_index":502,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":479,"title":{},"body":{"index.html":{}}}],["project",{"_index":513,"title":{},"body":{"index.html":{}}}],["properties",{"_index":110,"title":{"properties.html":{}},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"properties.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/post.service",{"_index":307,"title":{},"body":{"controllers/PostController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":75,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["publish",{"_index":152,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["published",{"_index":166,"title":{},"body":{"classes/CreatePostDTO.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":115,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["put",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{}}}],["query",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":414,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":416,"title":{},"body":{"controllers/UsersController.html":{}}}],["rahul",{"_index":369,"title":{},"body":{"injectables/UserService.html":{}}}],["rahul@gmail.com",{"_index":370,"title":{},"body":{"injectables/UserService.html":{}}}],["read",{"_index":523,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["reflect",{"_index":459,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{}}}],["replaceuser",{"_index":380,"title":{},"body":{"controllers/UsersController.html":{}}}],["repository",{"_index":491,"title":{},"body":{"index.html":{}}}],["request",{"_index":421,"title":{},"body":{"controllers/UsersController.html":{}}}],["required",{"_index":124,"title":{},"body":{"classes/CreatePostDTO.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"modules/PostsModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":55,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["returned",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":53,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["review",{"_index":471,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["rohit",{"_index":372,"title":{},"body":{"injectables/UserService.html":{}}}],["rohit@gmail.com",{"_index":373,"title":{},"body":{"injectables/UserService.html":{}}}],["run",{"_index":497,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":462,"title":{},"body":{"dependencies.html":{}}}],["sample_token2345sdfgh",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":484,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":469,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["schema",{"_index":116,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["send",{"_index":420,"title":{},"body":{"controllers/UsersController.html":{}}}],["series",{"_index":474,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":485,"title":{},"body":{"index.html":{}}}],["service",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["side",{"_index":486,"title":{},"body":{"index.html":{}}}],["slug",{"_index":117,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"modules/PostsModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["sponsors",{"_index":516,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":476,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":466,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":467,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":47,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":52,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":428,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":70,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":363,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":74,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:21",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:31",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:8",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":438,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":107,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":257,"title":{},"body":{"classes/PatchPostDTO.html":{},"coverage.html":{}}}],["src/posts/enum/poststatus.enum.ts",{"_index":468,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enum/posttype.enum.ts",{"_index":472,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.controller.ts",{"_index":272,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/posts/post.controller.ts:20",{"_index":289,"title":{},"body":{"controllers/PostController.html":{}}}],["src/posts/post.controller.ts:26",{"_index":292,"title":{},"body":{"controllers/PostController.html":{}}}],["src/posts/post.controller.ts:41",{"_index":288,"title":{},"body":{"controllers/PostController.html":{}}}],["src/posts/post.controller.ts:56",{"_index":303,"title":{},"body":{"controllers/PostController.html":{}}}],["src/posts/post.controller.ts:63",{"_index":296,"title":{},"body":{"controllers/PostController.html":{}}}],["src/posts/posts.module.ts",{"_index":349,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/post.service.ts",{"_index":329,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/posts/providers/post.service.ts:18",{"_index":334,"title":{},"body":{"injectables/PostService.html":{}}}],["src/posts/providers/post.service.ts:38",{"_index":335,"title":{},"body":{"injectables/PostService.html":{}}}],["src/posts/providers/post.service.ts:51",{"_index":337,"title":{},"body":{"injectables/PostService.html":{}}}],["src/posts/providers/post.service.ts:78",{"_index":333,"title":{},"body":{"injectables/PostService.html":{}}}],["src/posts/providers/post.service.ts:8",{"_index":331,"title":{},"body":{"injectables/PostService.html":{}}}],["src/users/dtos/create",{"_index":218,"title":{},"body":{"classes/CreateUserDTO.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":248,"title":{},"body":{"classes/GetUserParamDTO.html":{},"coverage.html":{}}}],["src/users/patch",{"_index":267,"title":{},"body":{"classes/PatchUserDTO.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{}}}],["src/users/providers/users.service.ts",{"_index":351,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:15",{"_index":359,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/users.service.ts:47",{"_index":361,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/users.service.ts:6",{"_index":355,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/users.controller.ts",{"_index":376,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:62",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:70",{"_index":383,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:75",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:79",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:83",{"_index":385,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":73,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":426,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":498,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":501,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":503,"title":{},"body":{"index.html":{}}}],["started",{"_index":478,"title":{"index.html":{}},"body":{}}],["starter",{"_index":490,"title":{},"body":{"index.html":{}}}],["statements",{"_index":432,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":118,"title":{},"body":{"classes/CreatePostDTO.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["statuses",{"_index":204,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["stay",{"_index":526,"title":{},"body":{"index.html":{}}}],["story",{"_index":473,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["string",{"_index":54,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["successfully",{"_index":287,"title":{},"body":{"controllers/PostController.html":{}}}],["summary",{"_index":319,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":517,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":537,"title":{},"body":{"modules.html":{}}}],["table",{"_index":447,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":446,"title":{},"body":{"coverage.html":{}}}],["tag1",{"_index":207,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["tag2",{"_index":208,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["tags",{"_index":119,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["test",{"_index":506,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":509,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":508,"title":{},"body":{"index.html":{}}}],["tests",{"_index":505,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":515,"title":{},"body":{"index.html":{}}}],["this.authservice.isauthenticated",{"_index":365,"title":{},"body":{"injectables/UserService.html":{}}}],["this.postservice.createpost(createpostdto",{"_index":322,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.getallposts",{"_index":315,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.getpostbyid(postid",{"_index":318,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.getusersposts(userid",{"_index":328,"title":{},"body":{"controllers/PostController.html":{}}}],["this.userservice.findall(getuserparamdto",{"_index":417,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findonebyid('1234",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findonebyid(userid",{"_index":342,"title":{},"body":{"injectables/PostService.html":{}}}],["title",{"_index":120,"title":{},"body":{"classes/CreatePostDTO.html":{},"injectables/PostService.html":{}}}],["token",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":527,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":188,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/GetUserParamDTO.html":{},"dependencies.html":{}}}],["true",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"controllers/PostController.html":{}}}],["true})@minlength(3",{"_index":171,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["true})@type(undefined",{"_index":142,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["twitter",{"_index":533,"title":{},"body":{"index.html":{}}}],["type",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["types",{"_index":201,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/PatchUserDTO.html":{},"dependencies.html":{}}}],["typescript",{"_index":489,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":169,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":141,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["unit",{"_index":504,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":544,"title":{},"body":{"properties.html":{}}}],["update",{"_index":265,"title":{},"body":{"classes/PatchPostDTO.html":{},"controllers/PostController.html":{}}}],["update'})@isint()@isnotempty",{"_index":261,"title":{},"body":{"classes/PatchPostDTO.html":{}}}],["updated",{"_index":323,"title":{},"body":{"controllers/PostController.html":{}}}],["updated'})@patch",{"_index":302,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost",{"_index":278,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(@body",{"_index":324,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(patchpostdto",{"_index":298,"title":{},"body":{"controllers/PostController.html":{}}}],["updateuser",{"_index":381,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(@body",{"_index":422,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(patchuserdto",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{}}}],["updating",{"_index":300,"title":{},"body":{"controllers/PostController.html":{}}}],["uppercase",{"_index":237,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["url",{"_index":131,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["use",{"_index":205,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["user",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchUserDTO.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["user's",{"_index":326,"title":{},"body":{"controllers/PostController.html":{}}}],["userid",{"_index":297,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["users",{"_index":343,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["users'})@apiquery({name",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":427,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":375,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":80,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":32,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["using",{"_index":282,"title":{},"body":{"controllers/PostController.html":{}}}],["valid",{"_index":161,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["validatenested",{"_index":186,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["validator",{"_index":187,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUserParamDTO.html":{},"classes/PatchPostDTO.html":{},"dependencies.html":{}}}],["value",{"_index":211,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":199,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["version",{"_index":542,"title":{},"body":{"properties.html":{}}}],["want",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["watch",{"_index":499,"title":{},"body":{"index.html":{}}}],["website",{"_index":531,"title":{},"body":{"index.html":{}}}],["world",{"_index":57,"title":{},"body":{"injectables/AppService.html":{}}}],["xxxxxxxxxxxxxxxx",{"_index":374,"title":{},"body":{"injectables/UserService.html":{}}}],["you'd",{"_index":520,"title":{},"body":{"index.html":{}}}],["z0",{"_index":158,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["z\\d]{8",{"_index":231,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["z])(?=.*[a",{"_index":228,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["z])(?=.*\\d)[a",{"_index":229,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["za",{"_index":230,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            User created modules\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n/**\n * User created modules\n */\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  /**\n   * Inject Auth Service\n   */\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from 'src/users/users.module';\nimport { AuthService } from './providers/auth.service';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuthenticated\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthenticated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:31\n                        \n                    \n\n\n            \n                \n                        isAuthenticated Method\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                boolean\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:21\n                        \n                    \n\n\n            \n                \n                        Login Method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                User Object\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/users.service';\n\n@Injectable()\n/**\n * Service for authentication\n */\nexport class AuthService {\n  // Injecting User Service\n  constructor(\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n  ) {}\n\n  /**\n   * Login Method\n   * @param email\n   * @param password\n   * @returns User Object\n   */\n  public login(email: string, password: string): any {\n    const user = this.userService.findOneById('1234');\n    return 'SAMPLE_TOKEN2345SDFGH';\n  }\n\n  /**\n   * isAuthenticated Method\n   * @param token\n   * @returns boolean\n   */\n  public isAuthenticated(): boolean {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDTO.html":{"url":"classes/CreatePostDTO.html","title":"class - CreatePostDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is my first post', description: 'The content of the post', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'https://example.com/featured-image.jpg', description: 'The featured image URL of the post', required: false})@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDTO[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', description: 'The meta options of the post', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'draft', description: 'The type of the post', enum: postType})@IsEnum(postType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2023-05-01T10:00:00Z', description: 'The publish date of the post', required: false})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '{\"title\": \"My First Post\"}', description: 'The schema of the post', required: false})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'my-post-title', description: 'The slug of the post'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug must be a valid slug format (e.g., my-post-title)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'published', description: 'The status of the post', enum: postStatus})@IsEnum(postStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'The tags of the post', required: false})@IsOptional()@IsArray()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'My First Post', description: 'The title of the post'})@IsNotEmpty()@IsString()@MinLength(5)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { postType } from '../enum/postType.enum';\nimport { postStatus } from '../enum/postStatus.enum';\nimport { CreatePostMetaOptionsDTO } from './create-post-meta-options.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreatePostDTO {\n  @ApiProperty({\n    example: 'My First Post',\n    description: 'The title of the post',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(5)\n  title: string;\n\n  @ApiProperty({\n    example: 'draft',\n    description: 'The type of the post',\n    enum: postType,\n  })\n  @IsEnum(postType)\n  @IsNotEmpty()\n  postType: postType; // Adjust these values to fit your post types\n\n  @ApiProperty({\n    example: 'my-post-title',\n    description: 'The slug of the post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message: 'Slug must be a valid slug format (e.g., my-post-title)',\n  })\n  slug: string;\n\n  @ApiProperty({\n    example: 'published',\n    description: 'The status of the post',\n    enum: postStatus,\n  })\n  @IsEnum(postStatus)\n  status: postStatus; // Adjust these values to fit your statuses\n\n  @ApiProperty({\n    example: 'This is my first post',\n    description: 'The content of the post',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  content?: string;\n\n  @ApiProperty({\n    example: '{\"title\": \"My First Post\"}',\n    description: 'The schema of the post',\n    required: false,\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiProperty({\n    example: 'https://example.com/featured-image.jpg',\n    description: 'The featured image URL of the post',\n    required: false,\n  })\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    example: '2023-05-01T10:00:00Z',\n    description: 'The publish date of the post',\n    required: false,\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn: Date; // Use Date type for date fields\n\n  @ApiProperty({\n    example: ['tag1', 'tag2'],\n    description: 'The tags of the post',\n    required: false,\n  })\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  tags?: string[];\n\n  @ApiProperty({\n    type: 'array',\n    description: 'The meta options of the post',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: { type: 'string' },\n        value: { type: 'string' },\n      },\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDTO)\n  metaOptions?: CreatePostMetaOptionsDTO[]; // Adjust the type of value as needed\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDTO.html":{"url":"classes/CreatePostMetaOptionsDTO.html","title":"class - CreatePostMetaOptionsDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDTO {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDTO.html":{"url":"classes/CreateUserDTO.html","title":"class - CreateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user-dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user-dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user-dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/, {message: 'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user-dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsNotEmpty,\n  IsEmail,\n  MinLength,\n  IsOptional,\n  MaxLength,\n  Matches,\n} from 'class-validator';\n\nexport class CreateUserDTO {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/, {\n    message:\n      'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one number',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUserParamDTO.html":{"url":"classes/GetUserParamDTO.html","title":"class - GetUserParamDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUserParamDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-user-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User ID', example: 1234, type: Number})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-user-dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUserParamDTO {\n  @ApiPropertyOptional({\n    description: 'User ID',\n    example: 1234,\n    type: Number,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDTO.html":{"url":"classes/PatchPostDTO.html","title":"class - PatchPostDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post-dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDTO)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1, description: 'The id of the post to update'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post-dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDTO } from './create-post-dto';\n\nexport class PatchPostDTO extends PartialType(CreatePostDTO) {\n  @ApiProperty({\n    example: 1,\n    description: 'The id of the post to update',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDTO.html":{"url":"classes/PatchUserDTO.html","title":"class - PatchUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/patch-user-dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDTO)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDTO } from './dtos/create-user-dto';\n\nexport class PatchUserDTO extends PartialType(CreateUserDTO) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getAllPosts\n                            \n                            \n                                    \n                                    Public\n                                getPostById\n                            \n                            \n                                    \n                                    Public\n                                getUserPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDTO: CreatePostDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create Post', description: 'This Endpoint is using for creating a new post.'})@ApiResponse({status: 201, description: 'Post has been successfully created'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/post.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDTO\n                                            \n                                                            CreatePostDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/post.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostById(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:postId')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/post.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getUserPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/users/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/post.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDTO: PatchPostDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Post', description: 'This Endpoint is using for updating a post.'})@ApiResponse({status: 200, description: 'Post has been successfully updated'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/post.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDTO\n                                            \n                                                            PatchPostDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostService } from './providers/post.service';\n\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDTO } from './dtos/create-post-dto';\nimport { PatchPostDTO } from './dtos/patch-post-dto';\n\n@Controller('posts')\n@ApiTags('Posts Api')\nexport class PostController {\n  /**\n   * Constructor\n   * Inject Post Service\n   * @param {PostService} postService\n   */\n  public constructor(private readonly postService: PostService) {}\n\n  // GET: all posts\n  @Get()\n  public getAllPosts() {\n    return this.postService.getAllPosts();\n  }\n\n  // GET: post by post ID\n  @Get('/:postId')\n  public getPostById(@Param('postId') postId: string) {\n    console.log('postId', postId);\n    return this.postService.getPostById(postId);\n  }\n\n  // Create: Create Post\n  @Post()\n  @ApiOperation({\n    summary: 'Create Post',\n    description: 'This Endpoint is using for creating a new post.',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Post has been successfully created',\n  })\n  public createPost(@Body() createPostDTO: CreatePostDTO) {\n    console.log('createPostDTO', createPostDTO);\n    return this.postService.createPost(createPostDTO);\n  }\n\n  // PATCH: Update Post\n  @ApiOperation({\n    summary: 'Update Post',\n    description: 'This Endpoint is using for updating a post.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Post has been successfully updated',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostDTO: PatchPostDTO) {\n    console.log('patchPostDTO', patchPostDTO);\n    return true;\n  }\n\n  // GET: user's all posts\n  @Get('/users/:userId')\n  public getUserPosts(@Param('userId') userId: string) {\n    return this.postService.getUsersPosts(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createPost\n                            \n                            \n                                    Public\n                                getAllPosts\n                            \n                            \n                                    Public\n                                getPostById\n                            \n                            \n                                    Public\n                                getUsersPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/post.service.ts:8\n                            \n                        \n\n                \n                    \n                            Injecting User Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(post: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/post.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Create a new post\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                post\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                post\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/post.service.ts:18\n                        \n                    \n\n\n            \n                \n                        Get All Posts\n\n\n                        \n                            Returns :     {}\n\n                        \n                            \n                                all posts\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostById(postId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/post.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Get Post By postId\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { postId: string; title: string; content: string; }\n\n                        \n                            \n                                post\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getUsersPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsersPosts(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/post.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Get All posts of a particular user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                posts\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/users.service';\n\n@Injectable()\n/**\n * Service for posts\n */\nexport class PostService {\n  /**\n   * Injecting User Service\n   */\n  constructor(private readonly userService: UserService) {}\n\n  /**\n   * Get All Posts\n   * @returns all posts\n   */\n  public getAllPosts() {\n    return [\n      {\n        id: 1,\n        title: 'Post 1',\n        content: 'Post 1 content',\n      },\n      {\n        id: 2,\n        title: 'Post 2',\n        content: 'Post 2 content',\n      },\n    ];\n  }\n\n  /**\n   * Get Post By postId\n   * @param {number} postId\n   * @returns {object} post\n   */\n  public getPostById(postId: string) {\n    return {\n      postId,\n      title: `Post ${postId}`,\n      content: `Post ${postId} content`,\n    };\n  }\n\n  /**\n   * Get All posts of a particular user\n   * @params {number} userId\n   * @returns {array} posts\n   */\n  public getUsersPosts(userId: string) {\n    // find the user\n    const user = this.userService.findOneById(userId);\n\n    // if users exists, return his/her all posts\n    return [\n      {\n        user,\n        postId: 1,\n        title: 'Post 1',\n        content: 'Post 1 content',\n      },\n      {\n        user,\n        postId: 2,\n        title: 'Post 2',\n        content: 'Post 2 content',\n      },\n    ];\n  }\n\n  /**\n   * Create a new post\n   * @param {object} post\n   * @returns {object} post\n   */\n\n  public createPost(post: any) {\n    return post;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostsModule -->\n\nPostService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostController } from './post.controller';\nimport { PostService } from './providers/post.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostController],\n  providers: [PostService],\n  imports: [UsersModule],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:6\n                            \n                        \n\n                \n                    \n                            Service for Users\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDTO: GetUserParamDTO, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDTO\n                                            \n                                                            GetUserParamDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:47\n                        \n                    \n\n\n            \n                \n                        Find a User by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: string; firstName: string; email: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from '@nestjs/common';\nimport { GetUserParamDTO } from '../dtos/get-user-dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\n\n@Injectable()\nexport class UserService {\n  /**\n   * Service for Users\n   */\n  constructor(\n    // Inject Auth Service\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n  ) {}\n  public findAll(\n    getUserParamDTO: GetUserParamDTO,\n    limit: number,\n    page: number,\n  ) {\n    // Auth Service\n    const isAuth = this.authService.isAuthenticated();\n    console.log('isAuth', isAuth);\n\n    return [\n      {\n        id: 1,\n        firstName: 'Deepak',\n        email: 'deepak@gmail.com',\n      },\n      {\n        id: 2,\n        firstName: 'Rahul',\n        email: 'rahul@gmail.com',\n      },\n      {\n        id: 3,\n        firstName: 'Rohit',\n        email: 'rohit@gmail.com',\n      },\n    ];\n  }\n\n  /**\n   * Find a User by ID\n   * @returns {User}\n   */\n  public findOneById(id: string) {\n    return {\n      id: id,\n      firstName: 'Deepak',\n      email: 'XXXXXXXXXXXXXXXX',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    Public\n                                deleteUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                replaceUser\n                            \n                            \n                                    \n                                    Public\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDTO: CreateUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDTO\n                                            \n                                                            CreateUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:83\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDTO: GetUserParamDTO, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Get Users', description: 'Fetches a list of registered users on the application.'})@ApiResponse({status: 200, description: 'List of users'})@ApiQuery({name: 'limit', required: false, type: Number, description: 'The number of enteries returned per query', example: 10})@ApiQuery({name: 'page', required: false, type: Number, description: 'The position of the page number that you want to the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDTO\n                                            \n                                                            GetUserParamDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Users / User\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        replaceUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    replaceUser()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:79\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(PatchUserDTO: PatchUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                PatchUserDTO\n                                            \n                                                            PatchUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDTO\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Patch,\n  Put,\n  Delete,\n  Param,\n  Query,\n  Body,\n  ParseIntPipe,\n  DefaultValuePipe,\n} from '@nestjs/common';\nimport { CreateUserDTO } from './dtos/create-user-dto';\nimport { GetUserParamDTO } from './dtos/get-user-dto';\nimport { PatchUserDTO } from './patch-user-dto';\nimport { UserService } from './providers/users.service';\n\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users Api')\nexport class UsersController {\n  /**\n   * Constructor\n   * Injecting User Service\n   * @param {UserService} userService\n   */\n  constructor(private readonly userService: UserService) {}\n\n  /**\n   *\n   * @param getUserParamDTO\n   * @param limit\n   * @param page\n   * @returns Users / User\n   */\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Get Users',\n    description: 'Fetches a list of registered users on the application.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'List of users',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'The number of enteries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    type: Number,\n    description:\n      'The position of the page number that you want to the API to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUserParamDTO: GetUserParamDTO,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', ParseIntPipe) page: number,\n  ) {\n    return this.userService.findAll(getUserParamDTO, limit, page);\n  }\n  @Post()\n  public createUser(@Body() createUserDTO: CreateUserDTO) {\n    console.log(typeof createUserDTO);\n    return 'You send a post request to users endpoint';\n  }\n  @Patch()\n  public updateUser(@Body() PatchUserDTO: PatchUserDTO) {\n    return PatchUserDTO;\n  }\n  @Put()\n  public replaceUser() {\n    return 'You send a put request to users endpoint';\n  }\n  @Delete()\n  public deleteUser() {\n    return 'You send a delete request to users endpoint';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UserService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UserService],\n  exports: [UserService],\n  imports: [forwardRef(() => AuthModule)],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-dto.ts\n            \n            class\n            CreatePostDTO\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post-dto.ts\n            \n            class\n            PatchPostDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/post.controller.ts\n            \n            controller\n            PostController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/posts/providers/post.service.ts\n            \n            injectable\n            PostService\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user-dto.ts\n            \n            class\n            CreateUserDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-user-dto.ts\n            \n            class\n            GetUserParamDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/patch-user-dto.ts\n            \n            class\n            PatchUserDTO\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UserService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enum/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n                        \n                            \n                                 ARCHIVED\n                            \n                        \n                        \n                            \n                                Value : archived\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n            \n        \n\n    src/posts/enum/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostsModule -->\n\nPostService->PostsModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
